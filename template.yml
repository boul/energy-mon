AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: CodeStar projectId used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''
  CoreName:
    Description: Greengrass Core on which your resources are deployed
    Default: "boul-home"
    Type: String

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: AllAtOnce
      Role: !Ref CodeDeployRole

Resources:
  GreengrassGroupVersion:
    Type: AWS::Greengrass::GroupVersion
    Properties:
      # GroupId: {'Fn::ImportValue': !Sub '${CoreName}-environment-GreengrassGroupId'}
      GroupId: "05104db5-eaa9-4715-ae48-61a44355d482"
      CoreDefinitionVersionArn: !Ref GreengrassCoreDefinitionVersion
      FunctionDefinitionVersionArn: !GetAtt FunctionDefinition.LatestVersionArn
      SubscriptionDefinitionVersionArn: !GetAtt SubscriptionDefinition.LatestVersionArn
      ResourceDefinitionVersionArn: !GetAtt ResourceDefinition.LatestVersionArn
      ConnectorDefinitionVersionArn: !GetAtt ResourceDefinition.LatestVersionArn

  GreengrassCoreDefinition:
    Type: AWS::Greengrass::CoreDefinition
    Properties:
      # use CoreName + "_Core" as "thingName"
      Name: !Join ["_", [!Ref CoreName, "Core"] ]

  GreengrassCoreDefinitionVersion:
    # Example of using GreengrassCoreDefinition referring to this
    # "Version" resource
    Type: AWS::Greengrass::CoreDefinitionVersion
    Properties:
      CoreDefinitionId: !Ref GreengrassCoreDefinition
      Cores:
        - Id: !Join ["_", [!Ref CoreName, "Core"] ]
          ThingArn: !Join
            - ":"
            - - "arn:aws:iot"
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - !Join
                - "/"
                - - "thing"
                  - !Join ["_", [!Ref CoreName, "Core"] ]
          CertificateArn: !Join
            - ":"
            - - "arn:aws:iot"
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - !Join
                - "/"
                - - "cert"
                  # - {'Fn::ImportValue': !Sub '${CoreName}-environment-IoTThingCertificateId'}
                  - "949b9799e50710f1e2c4b4c29ce2861f634e6336d87da70ad656fa0779d8bcaa"
          SyncShadow: "false"
  
  ConnectorDefinition:
    Type: AWS::Greengrass::ConnectorDefinition
    Properties:
      Name: ConnectorDefinition
      InitialVersion:
        Connectors:
          - ConnectorArn:  arn:aws:greengrass:eu-west-1::/connectors/DockerApplicationDeployment/versions/1
            Id: ContainerConnector
            Parameters: {
                "DockerComposeFileS3Bucket": "boul-energy-mon",
                "DockerComposeFileS3Key": "docker-compose.yml",
                "DockerComposeFileDestinationPath": "/home/ggc_user/tesla.yml",
                "AWSSecretsArnList": "[\"arn:aws:secretsmanager:region:account-id:secret:greengrass-secret1-hash\",\"arn:aws:secretsmanager:region:account-id:secret:greengrass-secret2-hash\"]",
                "DockerContainerStatusLogFrequency": "30"
            }
      

  FunctionDefinition:
    Type: 'AWS::Greengrass::FunctionDefinition'
    Properties:
      Name: FunctionDefinition
      InitialVersion:
        DefaultConfig:
          Execution:
            IsolationMode: GreengrassContainer
        Functions:
          - Id: !Join ["_", [!Ref CoreName, "sample"] ]
            FunctionArn: !Ref EnergyMain.Version
            FunctionConfiguration:
              Pinned: 'true'
              Executable: energy_main.py
              MemorySize: '65536'
              Timeout: '20'
              EncodingType: json
              Environment:
                Variables:
                  CORE_NAME: !Ref CoreName
                  TOPIC: energy
                  PV_ADDRESS: "10.0.3.43"
                  P1_PORT: "/dev/ttyUSB0"
                  POLL_INTERVAL: 10
                ResourceAccessPolicies:
                - ResourceId: 'ttyUSB0'
                  Permission: rw
                AccessSysfs: 'false'
                Execution:
                  IsolationMode: GreengrassContainer
                  # RunAs:
                  #   Uid: '1'
                  #   Gid: '10'
  
  ResourceDefinition:
    Type: 'AWS::Greengrass::ResourceDefinition'
    Properties:
      Name: ResourceDefinition
      InitialVersion:
        Resources:
          - Id: ttyUSB0
            Name: ttyUSB0
            ResourceDataContainer:
              LocalDeviceResourceData:
                GroupOwnerSetting:
                  AutoAddGroupOwner: 'true'
                SourcePath: /dev/ttyUSB0

        

  
  SubscriptionDefinition:
    Type: 'AWS::Greengrass::SubscriptionDefinition'
    Properties:
      Name: SubscriptionDefinition
      InitialVersion:
        # Example of one-to-many subscriptions in single definition version
        Subscriptions:
          - Id: Subscription1
            Source: 'cloud'
            Subject: !Join
              - "/"
              - - !Ref CoreName
                - "in"
            Target: !Ref EnergyMain.Version
          - Id: Subscription2
            Source: !Ref EnergyMain.Version
            Subject: "energy/#"
            Target: 'cloud'
          - Id: Subscription3
            Source: !Ref EnergyMain.Version
            Subject: "energy-test/#"
            Target: 'cloud'
  
  EnergyMain:
    Type: AWS::Serverless::Function
    Properties:
      Handler: energy_main.handler
      Runtime: python3.7
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      # Events:
      #   GetEvent:
      #     Type: Api
      #     Properties:
      #       Path: /
      #       Method: get
      #   PostEvent:
      #     Type: Api
      #     Properties:
      #       Path: /
      #       Method: post
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'

Outputs:
  GroupId:
    Value: "05104db5-eaa9-4715-ae48-61a44355d482"
